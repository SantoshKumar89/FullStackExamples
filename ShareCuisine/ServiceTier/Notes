Example
https://medium.com/@dinyangetoh/how-to-build-simple-restful-api-with-nodejs-expressjs-and-mongodb-99348012925d


===Created a mongo db cluster in Mongodb Atlas
https://cloud.mongodb.com/v2/5fc546e96f7a33224f8e7fca#clusters

=== Build Simple RESTful API With NodeJs, ExpressJs And MongoDb

=== package.json file gets Created

npm init

=== Install Express and Setup Server
npm install express --save-dev 

=== add below lines of code in index.js

// Import express
let express = require('express')
// Initialize the app
let app = express();
// Setup server port
var port = process.env.PORT || 3000;
// Send message for default URL
app.get('/', (req, res) => res.send('Hello World with Express'));
// Launch app to listen to specified port
app.listen(port, function () {
     console.log("Running RestHub on port " + port);
});



=== We are going to inject a bit of MVC into this app structure to keep our files lean and separate concerns. We need to three more files listed below…
api-routes — all api endpoint shall be defined in this file
controller — processes HTTP requests and defines available endpoints
model — manages database layer (request and response)



====npm install mongoose --save

Mongoose is Nodejs package for modeling Mongodb. It helps you handle validation and business logic for mongodb on Nodejs. You can learn more here.


===body-parser npm install body-parser --save

Body-parser enables your app to parse data from incoming request like form data via urlencode. We need to import this to our app and use them.


== configure DB 

// Deprecated: mongoose.connect('mongodb://localhost/resthub');
mongoose.connect('mongodb://localhost/resthub', { useNewUrlParser: true});
var db = mongoose.connection;



== Create Model and Controllers

Get/Put/Post/Delete
GET,PUT and Delete will have /:id

== Add environment properties

https://www.39digits.com/create-environment-specific-config-for-a-node-app

npm i lodash --save-dev

npm i dotenv --save-dev
The dotenv NPM module loads credentials stored in a .env file and saves it in environment variables inside process.env for use within our code.
Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env. 
Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology.

touch .env.sample

mkdir -p config/env
touch config/index.js
touch config/env/{defaults,development}.js

eg:

.env
PORT=3000

config/env/defaults.js
port: process.env.PORT

use pory from default.js anywhere in the src 

== Jwt token authentication

npm install jsonwebtoken --save-dev

const jwtToken = jwt.sign(userDetails, global.gConfig.jwt.access_token_secret);
res.send({ token: jwtToken, refreshToken: jwtToken });